From 76c30a86a96cf54304f2866207ec07bf83bb9a45 Mon Sep 17 00:00:00 2001
From: iuncuim <iuncuim@gmail.com>
Date: Sat, 16 Mar 2024 09:09:28 +0300
Subject: [PATCH] Update sun50i-h616.dtsi, dw-hdmi.c, and 8 more files...

---
 .../arm64/boot/dts/allwinner/sun50i-h616.dtsi |  37 ++++++
 drivers/gpu/drm/bridge/synopsys/dw-hdmi.c     |   8 +-
 drivers/gpu/drm/sun4i/sun8i_dw_hdmi.c         |   1 +
 drivers/gpu/drm/sun4i/sun8i_mixer.c           |  11 +-
 drivers/gpu/drm/sun4i/sun8i_mixer.h           |   3 +
 drivers/gpu/drm/sun4i/sun8i_vi_scaler.c       | 107 ++++++++++++------
 drivers/gpu/drm/sun4i/sun8i_vi_scaler.h       |   9 +-
 drivers/soc/sunxi/sunxi_sram.c                |  10 ++
 drivers/staging/media/sunxi/cedrus/cedrus.c   |  14 +++
 include/drm/bridge/dw_hdmi.h                  |   1 +
 10 files changed, 159 insertions(+), 42 deletions(-)

diff --git a/arch/arm64/boot/dts/allwinner/sun50i-h616.dtsi b/arch/arm64/boot/dts/allwinner/sun50i-h616.dtsi
index d17e7d79a..8efd3b8e1 100644
--- a/arch/arm64/boot/dts/allwinner/sun50i-h616.dtsi
+++ b/arch/arm64/boot/dts/allwinner/sun50i-h616.dtsi
@@ -166,6 +166,7 @@ mixer0: mixer@100000 {
 					 <&display_clocks CLK_MIXER0>;
 				clock-names = "bus", "mod";
 				resets = <&display_clocks RST_MIXER0>;
+				iommus = <&iommu 0>;
 
 				ports {
 					#address-cells = <1>;
@@ -182,6 +183,18 @@ mixer0_out_tcon_top_mixer0: endpoint {
 			};
 		};
 
+		video-codec@1c0e000 {
+			compatible = "allwinner,sun50i-h616-video-engine";
+			reg = <0x01c0e000 0x2000>;
+			clocks = <&ccu CLK_BUS_VE>, <&ccu CLK_VE>,
+				 <&ccu CLK_MBUS_VE>;
+			clock-names = "ahb", "mod", "ram";
+			resets = <&ccu RST_BUS_VE>;
+			interrupts = <GIC_SPI 93 IRQ_TYPE_LEVEL_HIGH>;
+			allwinner,sram = <&ve_sram 1>;
+			iommus = <&iommu 2>, <&iommu 3>;
+		};
+
 		syscon: syscon@3000000 {
 			compatible = "allwinner,sun50i-h616-system-control";
 			reg = <0x03000000 0x1000>;
@@ -202,6 +215,19 @@ de3_sram: sram-section@0 {
 					reg = <0x0000 0x1e000>;
 				};
 			};
+
+			sram_c1: sram@1a00000 {
+				compatible = "mmio-sram";
+				reg = <0x01a00000 0x200000>;
+				#address-cells = <1>;
+				#size-cells = <1>;
+				ranges = <0 0x01a00000 0x200000>;
+
+				ve_sram: sram-section@0 {
+					compatible = "allwinner,sun50i-h616-sram-c1";
+					reg = <0x000000 0x200000>;
+				};
+			};
 		};
 
 		ccu: clock@3001000 {
@@ -376,6 +402,17 @@ gic: interrupt-controller@3021000 {
 			#interrupt-cells = <3>;
 		};
 
+		iommu: iommu@30f0000 {
+			compatible = "allwinner,sun50i-h616-iommu",
+				     "allwinner,sun50i-h6-iommu";
+			reg = <0x030f0000 0x10000>;
+			interrupts = <GIC_SPI 61 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&ccu CLK_BUS_IOMMU>;
+			resets = <&ccu RST_BUS_IOMMU>;
+			#iommu-cells = <1>;
+			status = "okay";
+		};
+
 		mmc0: mmc@4020000 {
 			compatible = "allwinner,sun50i-h616-mmc",
 				     "allwinner,sun50i-a100-mmc";
diff --git a/drivers/gpu/drm/bridge/synopsys/dw-hdmi.c b/drivers/gpu/drm/bridge/synopsys/dw-hdmi.c
index d0d2410f4..88876c6ec 100644
--- a/drivers/gpu/drm/bridge/synopsys/dw-hdmi.c
+++ b/drivers/gpu/drm/bridge/synopsys/dw-hdmi.c
@@ -1043,16 +1043,16 @@ static void hdmi_video_sample(struct dw_hdmi *hdmi)
 		break;
 
 	case MEDIA_BUS_FMT_YUV8_1X24:
-		color_format = 0x17;
+		color_format = hdmi->plat_data->alt_yuv_map ? 0x17 : 0x09;
 		break;
 	case MEDIA_BUS_FMT_YUV10_1X30:
-		color_format = 0x18;
+		color_format = hdmi->plat_data->alt_yuv_map ? 0x18 : 0x0B;
 		break;
 	case MEDIA_BUS_FMT_YUV12_1X36:
-		color_format = 0x19;
+		color_format = hdmi->plat_data->alt_yuv_map ? 0x19 : 0x0D;
 		break;
 	case MEDIA_BUS_FMT_YUV16_1X48:
-		color_format = 0x1A;
+		color_format = hdmi->plat_data->alt_yuv_map ? 0x1A : 0x0F;
 		break;
 
 	default:
diff --git a/drivers/gpu/drm/sun4i/sun8i_dw_hdmi.c b/drivers/gpu/drm/sun4i/sun8i_dw_hdmi.c
index 2fc747543..5260067a2 100644
--- a/drivers/gpu/drm/sun4i/sun8i_dw_hdmi.c
+++ b/drivers/gpu/drm/sun4i/sun8i_dw_hdmi.c
@@ -356,6 +356,7 @@ static int sun8i_dw_hdmi_bind(struct device *dev, struct device *master,
 	plat_data->ycbcr_420_allowed = hdmi->quirks->use_drm_infoframe;
 	plat_data->input_bus_encoding = V4L2_YCBCR_ENC_709;
 	plat_data->output_port = 1;
+	plat_data->alt_yuv_map = 1;
 	sun8i_hdmi_phy_set_ops(phy, plat_data);
 
 	platform_set_drvdata(pdev, hdmi);
diff --git a/drivers/gpu/drm/sun4i/sun8i_mixer.c b/drivers/gpu/drm/sun4i/sun8i_mixer.c
index 65615b5f9..e61595a7f 100644
--- a/drivers/gpu/drm/sun4i/sun8i_mixer.c
+++ b/drivers/gpu/drm/sun4i/sun8i_mixer.c
@@ -255,13 +255,14 @@ int sun8i_mixer_drm_format_to_hw(u32 format, u32 *hw_format)
 static void sun8i_mixer_commit(struct sunxi_engine *engine)
 {
 	struct sun8i_mixer *mixer = engine_to_sun8i_mixer(engine);
+	int i;
+
+	for (i = 0; i < 4; i++)
+		sun8i_vi_scaler_apply(mixer, i);
 
 	DRM_DEBUG_DRIVER("Committing changes\n");
 
-	if (mixer->cfg->de_type == sun8i_mixer_de33)
-		regmap_write(mixer->top_regs, SUN50I_MIXER_GLOBAL_DBUFF,
-			     SUN8I_MIXER_GLOBAL_DBUFF_ENABLE);
-	else
+	if (mixer->cfg->de_type != sun8i_mixer_de33)
 		regmap_write(engine->regs, SUN8I_MIXER_GLOBAL_DBUFF,
 			     SUN8I_MIXER_GLOBAL_DBUFF_ENABLE);
 }
@@ -383,7 +384,7 @@ static u32 *sun8i_mixer_get_supported_fmts(struct sunxi_engine *engine, u32 *num
 }
 
 static const struct sunxi_engine_ops sun8i_engine_ops = {
-	.commit			= sun8i_mixer_commit,
+	.vblank_quirk		= sun8i_mixer_commit,
 	.layers_init		= sun8i_layers_init,
 	.mode_set		= sun8i_mixer_mode_set,
 	.get_supported_fmts	= sun8i_mixer_get_supported_fmts,
diff --git a/drivers/gpu/drm/sun4i/sun8i_mixer.h b/drivers/gpu/drm/sun4i/sun8i_mixer.h
index f1c2cdb88..51721289d 100644
--- a/drivers/gpu/drm/sun4i/sun8i_mixer.h
+++ b/drivers/gpu/drm/sun4i/sun8i_mixer.h
@@ -11,6 +11,7 @@
 #include <linux/reset.h>
 
 #include "sunxi_engine.h"
+#include "sun8i_vi_scaler.h"
 
 #define SUN8I_MIXER_SIZE(w, h)			(((h) - 1) << 16 | ((w) - 1))
 #define SUN8I_MIXER_COORD(x, y)			((y) << 16 | (x))
@@ -201,6 +202,8 @@ struct sun8i_mixer {
 
 	struct regmap			*top_regs;
 	struct regmap			*disp_regs;
+
+	struct scaler_state		vi_scl_states[4];
 };
 
 static inline struct sun8i_mixer *
diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c
index 9c7f6e7d7..4d4488db6 100644
--- a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c
+++ b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c
@@ -10,6 +10,7 @@
  */
 
 #include "sun8i_vi_scaler.h"
+#include "sun8i_mixer.h"
 
 static const u32 lan3coefftab32_left[480] = {
 	0x40000000, 0x40fe0000, 0x3ffd0100, 0x3efc0100,
@@ -877,11 +878,22 @@ static int sun8i_vi_scaler_coef_index(unsigned int step)
 	}
 }
 
-static void sun8i_vi_scaler_set_coeff_vi(struct regmap *map, u32 base,
+static inline void sun8i_vi_scaler_reg_write(struct scaler_state *state, u32 reg, u32 value)
+{
+	memcpy(&state->regs[reg], &value, sizeof(u32));
+}
+
+static inline void sun8i_vi_scaler_reg_bulk_write(struct scaler_state *state, u32 reg, const u32 *values, unsigned int count)
+{
+	memcpy(&state->regs[reg], values, sizeof(u32) * count);
+}
+
+static void sun8i_vi_scaler_set_coeff_vi(struct scaler_state *state,
 					 u32 hstep, u32 vstep,
 					 const struct drm_format_info *format)
 {
 	const u32 *ch_left, *ch_right, *cy;
+	u32 base = 0;
 	int offset;
 
 	if (format->is_yuv) {
@@ -896,55 +908,54 @@ static void sun8i_vi_scaler_set_coeff_vi(struct regmap *map, u32 base,
 
 	offset = sun8i_vi_scaler_coef_index(hstep) *
 			SUN8I_VI_SCALER_COEFF_COUNT;
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_YHCOEFF0(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_YHCOEFF0(base, 0),
 			  &lan3coefftab32_left[offset],
 			  SUN8I_VI_SCALER_COEFF_COUNT);
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_YHCOEFF1(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_YHCOEFF1(base, 0),
 			  &lan3coefftab32_right[offset],
 			  SUN8I_VI_SCALER_COEFF_COUNT);
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_CHCOEFF0(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_CHCOEFF0(base, 0),
 			  &ch_left[offset], SUN8I_VI_SCALER_COEFF_COUNT);
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_CHCOEFF1(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_CHCOEFF1(base, 0),
 			  &ch_right[offset], SUN8I_VI_SCALER_COEFF_COUNT);
 
 	offset = sun8i_vi_scaler_coef_index(hstep) *
 			SUN8I_VI_SCALER_COEFF_COUNT;
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_YVCOEFF(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_YVCOEFF(base, 0),
 			  &lan2coefftab32[offset], SUN8I_VI_SCALER_COEFF_COUNT);
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_CVCOEFF(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_CVCOEFF(base, 0),
 			  &cy[offset], SUN8I_VI_SCALER_COEFF_COUNT);
 }
 
-static void sun8i_vi_scaler_set_coeff_ui(struct regmap *map, u32 base,
+static void sun8i_vi_scaler_set_coeff_ui(struct scaler_state *state,
 					 u32 hstep, u32 vstep,
 					 const struct drm_format_info *format)
 {
 	const u32 *table;
+	u32 base = 0;
 	int offset;
 
 	offset = sun8i_vi_scaler_coef_index(hstep) *
 			SUN8I_VI_SCALER_COEFF_COUNT;
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_YHCOEFF0(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_YHCOEFF0(base, 0),
 			  &lan2coefftab32[offset], SUN8I_VI_SCALER_COEFF_COUNT);
 	offset = sun8i_vi_scaler_coef_index(vstep) *
 			SUN8I_VI_SCALER_COEFF_COUNT;
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_YVCOEFF(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_YVCOEFF(base, 0),
 			  &lan2coefftab32[offset], SUN8I_VI_SCALER_COEFF_COUNT);
 
 	table = format->is_yuv ? bicubic4coefftab32 : lan2coefftab32;
 	offset = sun8i_vi_scaler_coef_index(hstep) *
 			SUN8I_VI_SCALER_COEFF_COUNT;
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_CHCOEFF0(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_CHCOEFF0(base, 0),
 			  &table[offset], SUN8I_VI_SCALER_COEFF_COUNT);
 }
 
 void sun8i_vi_scaler_disable(struct sun8i_mixer *mixer, int layer)
 {
-	u32 base;
-
-	base = sun8i_vi_scaler_base(mixer, layer);
+	struct scaler_state *state = &mixer->vi_scl_states[layer];
 
-	regmap_write(mixer->engine.regs, SUN8I_SCALER_VSU_CTRL(base), 0);
+	sun8i_vi_scaler_reg_write(state, SUN8I_SCALER_VSU_CTRL(0), 0);
 }
 
 void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
@@ -952,11 +963,12 @@ void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
 			   u32 hscale, u32 vscale, u32 hphase, u32 vphase,
 			   const struct drm_format_info *format)
 {
+	struct scaler_state *state = &mixer->vi_scl_states[layer];
 	u32 chphase, cvphase;
 	u32 insize, outsize;
 	u32 base;
 
-	base = sun8i_vi_scaler_base(mixer, layer);
+	base = 0;//sun8i_vi_scaler_base(mixer, layer);
 
 	hphase <<= SUN8I_VI_SCALER_PHASE_FRAC - 16;
 	vphase <<= SUN8I_VI_SCALER_PHASE_FRAC - 16;
@@ -980,7 +992,7 @@ void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
 		cvphase = vphase;
 	}
 
-	regmap_write(mixer->engine.regs, SUN8I_SCALER_VSU_CTRL(base),
+	sun8i_vi_scaler_reg_write(state, SUN8I_SCALER_VSU_CTRL(base),
 		     SUN8I_SCALER_VSU_CTRL_EN);
 
 	if (mixer->cfg->de_type >= sun8i_mixer_de3) {
@@ -991,46 +1003,77 @@ void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
 		else
 			val = SUN50I_SCALER_VSU_SCALE_MODE_NORMAL;
 
-		regmap_write(mixer->engine.regs,
+		sun8i_vi_scaler_reg_write(state,
 			     SUN50I_SCALER_VSU_SCALE_MODE(base), val);
 	}
 
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_OUTSIZE(base), outsize);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_YINSIZE(base), insize);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_YHSTEP(base), hscale);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_YVSTEP(base), vscale);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_YHPHASE(base), hphase);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_YVPHASE(base), vphase);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_CINSIZE(base),
 		     SUN8I_VI_SCALER_SIZE(src_w / format->hsub,
 					  src_h / format->vsub));
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_CHSTEP(base),
 		     hscale / format->hsub);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_CVSTEP(base),
 		     vscale / format->vsub);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_CHPHASE(base), chphase);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_CVPHASE(base), cvphase);
 
 	if (sun8i_vi_scaler_is_vi_plane(mixer, layer))
-		sun8i_vi_scaler_set_coeff_vi(mixer->engine.regs, base,
+		sun8i_vi_scaler_set_coeff_vi(state,
 					     hscale, vscale, format);
 	else
-		sun8i_vi_scaler_set_coeff_ui(mixer->engine.regs, base,
+		sun8i_vi_scaler_set_coeff_ui(state,
 					     hscale, vscale, format);
 
 	if (mixer->cfg->de_type <= sun8i_mixer_de3)
-		regmap_write(mixer->engine.regs, SUN8I_SCALER_VSU_CTRL(base),
+		sun8i_vi_scaler_reg_write(state, SUN8I_SCALER_VSU_CTRL(base),
 			     SUN8I_SCALER_VSU_CTRL_EN |
 			     SUN8I_SCALER_VSU_CTRL_COEFF_RDY);
 }
+
+void sun8i_vi_scaler_apply(struct sun8i_mixer *mixer, int layer)
+{
+	struct scaler_state *state = &mixer->vi_scl_states[layer];
+	bool vi_plane = sun8i_vi_scaler_is_vi_plane(mixer, layer);
+	u32 base = sun8i_vi_scaler_base(mixer, layer);
+
+	if (!state->regs[0]) {
+		regmap_write(mixer->engine.regs, SUN8I_SCALER_VSU_CTRL(base), 0);
+		return;
+	}
+
+	regmap_bulk_write(mixer->engine.regs, base, &state->regs[0], 1);
+	regmap_bulk_write(mixer->engine.regs, base + 0x10, &state->regs[0x10], 1);
+	regmap_bulk_write(mixer->engine.regs, base + 0x40, &state->regs[0x40], 1);
+	regmap_bulk_write(mixer->engine.regs, base + 0x80, &state->regs[0x80], 1);
+	regmap_bulk_write(mixer->engine.regs, base + 0x88, &state->regs[0x88], 3);
+	regmap_bulk_write(mixer->engine.regs, base + 0x98, &state->regs[0x98], 1);
+	regmap_bulk_write(mixer->engine.regs, base + 0xc0, &state->regs[0xc0], 1);
+	regmap_bulk_write(mixer->engine.regs, base + 0xc8, &state->regs[0xc8], 3);
+	regmap_bulk_write(mixer->engine.regs, base + 0xd8, &state->regs[0xd8], 1);
+	regmap_bulk_write(mixer->engine.regs, base + 0x200, &state->regs[0x200], 32);
+	if (vi_plane)
+		regmap_bulk_write(mixer->engine.regs, base + 0x300, &state->regs[0x300], 32);
+	regmap_bulk_write(mixer->engine.regs, base + 0x400, &state->regs[0x400], 32);
+	regmap_bulk_write(mixer->engine.regs, base + 0x600, &state->regs[0x600], 32);
+	if (vi_plane) {
+		regmap_bulk_write(mixer->engine.regs, base + 0x700, &state->regs[0x700], 32);
+		regmap_bulk_write(mixer->engine.regs, base + 0x800, &state->regs[0x800], 32);
+	}
+}
diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h
index 9fe056a2c..bdd5ba5e3 100644
--- a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h
+++ b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h
@@ -10,7 +10,6 @@
 #define _SUN8I_VI_SCALER_H_
 
 #include <drm/drm_fourcc.h>
-#include "sun8i_mixer.h"
 
 #define DE2_VI_SCALER_UNIT_BASE 0x20000
 #define DE2_VI_SCALER_UNIT_SIZE 0x20000
@@ -70,6 +69,14 @@
 #define SUN50I_SCALER_VSU_ANGLE_SHIFT(x)		(((x) << 16) & 0xF)
 #define SUN50I_SCALER_VSU_ANGLE_OFFSET(x)		((x) & 0xFF)
 
+struct sun8i_mixer;
+
+struct scaler_state {
+	u8 regs[0x900];
+};
+
+void sun8i_vi_scaler_apply(struct sun8i_mixer *mixer, int layer);
+
 void sun8i_vi_scaler_disable(struct sun8i_mixer *mixer, int layer);
 void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
 			   u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
diff --git a/drivers/soc/sunxi/sunxi_sram.c b/drivers/soc/sunxi/sunxi_sram.c
index 6eb6cf062..c95d25051 100644
--- a/drivers/soc/sunxi/sunxi_sram.c
+++ b/drivers/soc/sunxi/sunxi_sram.c
@@ -70,6 +70,12 @@ static struct sunxi_sram_desc sun4i_a10_sram_c1 = {
 				  SUNXI_SRAM_MAP(0x7fffffff, 1, "ve")),
 };
 
+static struct sunxi_sram_desc sun50i_h616_sram_c1 = {
+	.data	= SUNXI_SRAM_DATA("C1", 0x0, 0x0, 31,
+				  SUNXI_SRAM_MAP(0x7fffffff, 0, "cpu"),
+				  SUNXI_SRAM_MAP(0, 1, "ve")),
+};
+
 static struct sunxi_sram_desc sun4i_a10_sram_d = {
 	.data	= SUNXI_SRAM_DATA("D", 0x4, 0x0, 1,
 				  SUNXI_SRAM_MAP(0, 0, "cpu"),
@@ -99,6 +105,10 @@ static const struct of_device_id sunxi_sram_dt_ids[] = {
 		.compatible	= "allwinner,sun50i-a64-sram-c",
 		.data		= &sun50i_a64_sram_c.data,
 	},
+	{
+		.compatible	= "allwinner,sun50i-h616-sram-c1",
+		.data		= &sun50i_h616_sram_c1.data,
+	},
 	{}
 };
 
diff --git a/drivers/staging/media/sunxi/cedrus/cedrus.c b/drivers/staging/media/sunxi/cedrus/cedrus.c
index 8d1ad841f..d97be19d7 100644
--- a/drivers/staging/media/sunxi/cedrus/cedrus.c
+++ b/drivers/staging/media/sunxi/cedrus/cedrus.c
@@ -649,6 +649,16 @@ static const struct cedrus_variant sun50i_h6_cedrus_variant = {
 	.mod_rate	= 648000000,
 };
 
+static const struct cedrus_variant sun50i_h616_cedrus_variant = {
+	.capabilities	= CEDRUS_CAPABILITY_UNTILED |
+			  CEDRUS_CAPABILITY_MPEG2_DEC |
+			  CEDRUS_CAPABILITY_H264_DEC |
+			  CEDRUS_CAPABILITY_H265_DEC |
+			  CEDRUS_CAPABILITY_H265_10_DEC |
+			  CEDRUS_CAPABILITY_VP8_DEC,
+	.mod_rate	= 600000000,
+};
+
 static const struct of_device_id cedrus_dt_match[] = {
 	{
 		.compatible = "allwinner,sun4i-a10-video-engine",
@@ -694,6 +704,10 @@ static const struct of_device_id cedrus_dt_match[] = {
 		.compatible = "allwinner,sun50i-h6-video-engine",
 		.data = &sun50i_h6_cedrus_variant,
 	},
+	{
+		.compatible = "allwinner,sun50i-h616-video-engine",
+		.data = &sun50i_h616_cedrus_variant,
+	},
 	{ /* sentinel */ }
 };
 MODULE_DEVICE_TABLE(of, cedrus_dt_match);
diff --git a/include/drm/bridge/dw_hdmi.h b/include/drm/bridge/dw_hdmi.h
index 30313f6db..ef1276a5b 100644
--- a/include/drm/bridge/dw_hdmi.h
+++ b/include/drm/bridge/dw_hdmi.h
@@ -164,6 +164,7 @@ struct dw_hdmi_plat_data {
 			     unsigned long mtmdsclock);
 
 	unsigned int disable_cec : 1;
+	unsigned int alt_yuv_map : 1;
 };
 
 struct dw_hdmi *dw_hdmi_probe(struct platform_device *pdev,
-- 
2.44.0

